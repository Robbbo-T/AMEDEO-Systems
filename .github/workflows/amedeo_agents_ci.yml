name: AMEDEO Agents CI
on: [push, pull_request]
permissions:
  contents: read
  id-token: write
  packages: write
concurrency: ci-${{ github.ref }}

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      PYTHONHASHSEED: "0"
      AMEDEO_CI_RUN: "true"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For git history in SBOM

      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -q pytest pytest-cov ruff bandit pyyaml
          pip install -q cryptography  # For PQC mock

      # === VALIDATION GATES ===
      
      - name: UTCS-MI Check (100%)
        run: |
          python tools/utcs_validator.py
          echo "âœ… UTCS-MI: 100% compliant"

      - name: Security Scan (HIGH only)
        run: |
          bandit -r agents/ -iii -ll -f json -o bandit.json || true
          python tools/check_bandit.py bandit.json  # Fail on HIGH

      - name: Lint (Ruff strict)
        run: |
          ruff check agents/ tests/ --select E,F,W,C90,N --line-length 120

      - name: Tests + Coverage â‰¥92%
        run: |
          pytest -v --cov=agents --cov-report=xml --cov-report=term --cov-fail-under=92
          echo "âœ… Coverage: â‰¥92%"

      - name: Validate Agent Depth (â‰¥3x each, â‰¥81x cascade)
        run: |
          python tools/depth_validator.py
          echo "âœ… Depth: All agents â‰¥3x, cascade â‰¥81x"

      # === EVIDENCE GENERATION ===
      
      - name: Generate DET Evidence
        run: |
          python tools/generate_det_evidence.py > det_evidence.json
          echo "âœ… DET evidence generated"

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          output-file: sbom.spdx.json

      # === CRYPTOGRAPHIC SIGNING ===
      
      - name: PQC Sign Artifacts
        run: |
          python tools/pqc_sign.py agents/*.py --algorithm Dilithium3 --output signatures.json
          echo "âœ… PQC signatures generated"

      - name: PQC Verify Signatures
        run: |
          python tools/pqc_verify.py signatures.json --algorithm Dilithium3
          echo "âœ… PQC signatures verified"

      # === ARTIFACTS ===
      
      - name: Create Evidence Bundle
        run: |
          tar -czf evidence-bundle.tar.gz \
            det_evidence.json \
            sbom.spdx.json \
            signatures.json \
            coverage.xml \
            bandit.json

      - name: Upload Evidence Bundle
        uses: actions/upload-artifact@v4
        with:
          name: amedeo-evidence-${{ github.sha }}
          path: evidence-bundle.tar.gz
          retention-days: 90

      # === FINAL GATE ===
      
      - name: Final Validation Gate
        run: |
          python tools/final_gate.py
          echo "ðŸŽ¯ All AMEDEO hard gates passed!"